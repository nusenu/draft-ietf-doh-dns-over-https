---
title: DNS Queries over HTTPS (DoH)
abbrev: DNS Queries over HTTPS (DoH)
docname: draft-ietf-doh-dns-over-https

stand_alone: true

ipr: trust200902
area: Art
kw: Internet-Draft
cat: std

pi:
  toc: yes
  tocdepth: 4
  sortrefs: yes
  symrefs: yes

author:
 -
   ins: P. Hoffman
   name: Paul Hoffman
   org: ICANN
   email: paul.hoffman@icann.org
 -
   ins: P. McManus
   name: Patrick McManus
   org: Mozilla
   email: mcmanus@ducksong.com

normative:
  RFC1035:
  RFC2119:
  RFC2308:
  RFC4648:
  RFC5246:
  RFC6570:
  RFC7230:
  RFC7231:
  RFC7232:
  RFC7234:
  RFC7235:
  RFC7540:
  RFC7541:
  RFC8174:

informative:
  RFC2818:
  RFC5280:
  RFC5861:
  RFC6066:
  RFC6147:
  RFC6891:
  RFC6950:
  RFC6960:
  RFC6973:
  RFC7626:
  RFC7828:
  RFC7830:
  RFC7858:
  CORS:
    title: "Cross-Origin Resource Sharing"
    target: "https://fetch.spec.whatwg.org/#http-cors-protocol"

--- abstract

This document describes how to make DNS queries over HTTPS.

--- middle

# Introduction

This document defines a specific protocol for sending DNS {{RFC1035}}
queries and getting DNS responses over HTTP {{RFC7540}} using https
URIs (and therefore TLS {{RFC5246}} security for integrity and
confidentiality). Each DNS query-response pair is mapped into a HTTP
exchange.

The described approach is more than a tunnel over HTTP. It establishes
default media formatting types for requests and responses but uses
normal HTTP content negotiation mechanisms for selecting alternatives
that endpoints may prefer in anticipation of serving new use cases. In
addition to this media type negotiation, it aligns itself with HTTP
features such as caching, redirection, proxying, authentication, and
compression.

The integration with HTTP provides a transport suitable for both
existing DNS clients and native web applications seeking access to
the DNS.

Two primary uses cases were considered during this protocol's
development. They included preventing on-path devices from interfering
with DNS operations and allowing web applications to access DNS
information via existing browser APIs in a safe way consistent with
Cross Origin Resource Sharing (CORS) {{CORS}}. No special effort has
been taken to enable or prevent application to other use cases.
This document focuses on communication between DNS clients (such as operating
system stub resolvers) and recursive resolvers.


# Terminology

A server that supports this protocol is called a "DoH server" to
differentiate it from a "DNS server"
(one that only provides DNS service over one or more of the other transport protocols
standardized for DNS).
Similarly, a client that supports this protocol is called a
"DoH client".

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY",
and "OPTIONAL" in this document are to be interpreted as described in
BCP 14 {{RFC2119}} {{RFC8174}} when, and only when, they
appear in all capitals, as shown here.

# Protocol Requirements

\[\[ RFC Editor: Please remove this entire section before publication. \]\]

The protocol described here bases its design on the following protocol requirements:

* The protocol must use normal HTTP semantics.

* The queries and responses must be able to be flexible enough to express every
  DNS query that would normally be sent in DNS over UDP (including queries and
  responses that use DNS extensions, but not those that require multiple
  responses).

* The protocol must permit the addition of new formats for DNS queries and responses.

* The protocol must ensure interoperability by specifying a single format for
  requests and responses that is mandatory to implement.  That format must be
  able to support future modifications to the DNS protocol including the
  inclusion of one or more EDNS options (including those not yet defined).

* The protocol must use a secure transport that meets the
  requirements for HTTPS.

## Non-requirements

* Supporting network-specific DNS64 {{RFC6147}}

* Supporting other network-specific inferences from plaintext DNS queries

* Supporting insecure HTTP

# Selection of DoH Server {#selection}

Configuration, discovery, and updating of the URI Template {{RFC6570}}
(see {{httprequest}}) is done out of band from this protocol. Note
that configuration might be manual (such as a user typing URI
Templates in a user interface for "options") or automatic (such as URI
Templates being supplied in responses from DHCP or similar
protocols). DoH Servers MAY support more than one URI. This allows
the different endpoints to have different properties such as different
authentication requirements or service level guarantees.

A DoH client uses configuration to select the URI, and thus the
DoH server, that is to be used for resolution. [RFC2818] defines how HTTPS
verifies the DoH server's identity.

A DoH client MUST NOT use a different URI simply because it was discovered
outside of the client's configuration, or because a server offers an unsolicited response
that appears to be a valid answer to a DNS query. This
specification does not extend DNS resolution privileges to URIs that
are not recognized by the DoH client as configured URIs. Such
scenarios may create additional operational, tracking, and security
hazards that require limitations for safe usage. A future
specification may support this use case.

# The HTTP Exchange

## The HTTP Request {#httprequest}

A DoH client encodes a single DNS query
into an HTTP request using either the HTTP GET or POST method and the
other requirements of this section. The DoH server defines the URI
used by the request through the use of a URI Template.

The URI Template defined in this document is processed without any
variables when the HTTP method is POST. When the HTTP method is
GET the single variable "dns" is defined as the content of the DNS request
(as described in {{dnswire}}), encoded with base64url {{RFC4648}}.

Future specifications for new media types MUST define the variables
used for URI Template processing with this protocol.

DoH servers MUST implement both the POST and GET methods.

When using the POST method the DNS query is included as the message
body of the HTTP request and the Content-Type request header indicates
the media type of the message. POST-ed requests are smaller than their
GET equivalents.

Using the GET method is friendlier to many HTTP cache implementations.

The DoH client SHOULD include an HTTP "Accept" request header to
indicate what type of content can be understood in
response. Irrespective of the value of the Accept request header, the
client MUST be prepared to process "application/dns-message"
(as described in {{dnswire}}) responses but MAY also process any other type it receives.

In order to maximize cache friendliness, DoH clients using media
formats that include DNS ID, such as application/dns-message,
SHOULD use a DNS ID of 0 in every DNS request.  HTTP correlates
the request and response, thus eliminating the need for the ID in a media
type such as application/dns-message. The use of a varying
DNS ID can cause semantically equivalent DNS queries to be cached
separately.

DoH clients can use HTTP/2 padding and compression in the same way
that other HTTP/2 clients use (or don't use) them.

### HTTP Request Examples

These examples use HTTP/2 style formatting from {{RFC7540}}.

These examples use a DoH service with a URI Template of
"https://dnsserver.example.net/dns-query{?dns}" to resolve
IN A records.

The requests are represented as application/dns-message typed bodies.

The first example request uses GET to request www.example.com

~~~~~
:method = GET
:scheme = https
:authority = dnsserver.example.net
:path = /dns-query?dns=AAABAAABAAAAAAAAA3d3dwdleGFtcGxlA2NvbQAAAQAB
accept = application/dns-message
~~~~~

The same DNS query for www.example.com, using the POST method would be:

~~~~~
:method = POST
:scheme = https
:authority = dnsserver.example.net
:path = /dns-query
accept = application/dns-message
content-type = application/dns-message
content-length = 33

<33 bytes represented by the following hex encoding>
00 00 01 00 00 01 00 00  00 00 00 00 03 77 77 77
07 65 78 61 6d 70 6c 65  03 63 6f 6d 00 00 01 00
01
~~~~~

Finally, a GET based query for
a.62characterlabel-makes-base64url-distinct-from-standard-base64.example.com
is shown as an example to emphasize that the encoding alphabet of
base64url is different than regular base64 and that padding is omitted.

The DNS query is 94 bytes represented by the following hex encoding

~~~~~

00 00 01 00 00 01 00 00  00 00 00 00 01 61 3e 36
32 63 68 61 72 61 63 74  65 72 6c 61 62 65 6c 2d
6d 61 6b 65 73 2d 62 61  73 65 36 34 75 72 6c 2d
64 69 73 74 69 6e 63 74  2d 66 72 6f 6d 2d 73 74
61 6e 64 61 72 64 2d 62  61 73 65 36 34 07 65 78
61 6d 70 6c 65 03 63 6f  6d 00 00 01 00 01

:method = GET
:scheme = https
:authority = dnsserver.example.net
:path = /dns-query? (no space or CR)
        dns=AAABAAABAAAAAAAAAWE-NjJjaGFyYWN0ZXJsYWJl (no space or CR)
        bC1tYWtlcy1iYXNlNjR1cmwtZGlzdGluY3QtZnJvbS1z (no space or CR)
        dGFuZGFyZC1iYXNlNjQHZXhhbXBsZQNjb20AAAEAAQ
accept = application/dns-message

~~~~~

## The HTTP Response {#http-response}

The only response type defined in this document is
"application/dns-message", but it is possible that other
response formats will be defined in the future.
A DoH server MUST be able to process application/dns-message
request messages.

Different response media types will provide more or less information from a DNS
response. For example, one response type might include information from the
DNS header bytes while another might omit it. The amount and type of information
that a media type gives is solely up to the format, and not defined in
this protocol.

Each DNS request-response pair is matched to one HTTP exchange.
The responses may be processed and transported in any order
using HTTP's multi-streaming functionality ({{RFC7540}} Section 5).

{{caching}} discusses the relationship between DNS and HTTP
response caching.

### Handling DNS and HTTP Errors

DNS response codes indicate either success or failure for the DNS query. A
successful HTTP response with a 2xx status code ({{RFC7231}} Section 6.3) can be used for
any valid DNS response, regardless of the DNS response code. For example, a
successful 2xx HTTP status code is used even with a DNS message whose DNS
response code indicates failure, such as SERVFAIL or NXDOMAIN.

HTTP responses with non-successful HTTP status codes do not contain
replies to the original DNS question in the HTTP request.
DoH clients need to use the same semantic processing of non-successful
HTTP status codes as other HTTP clients. This might mean that the DoH
client retries the query with the same DoH server, such as authorization
failures (HTTP status code 401 {{RFC7235}} Section 3.1). It could also mean
that the DoH client retries  with a different DoH server, such as for
unsupported media types (HTTP status code 415, {{RFC7231}} Section 6.5.13), or
where the server cannot generate a representation suitable for the client
(HTTP status code 406, {{RFC7231}} Section 6.5.6), and so on.

### HTTP Response Example

This is an example response for a query for the IN A records for
"www.example.com" with recursion turned on. The response bears one
record with an address of 192.0.2.1 and a TTL of 128 seconds.

~~~~~
:status = 200
content-type = application/dns-message
content-length = 64
cache-control = max-age=128

<64 bytes represented by the following hex encoding>
00 00 81 80 00 01 00 01  00 00 00 00 03 77 77 77
07 65 78 61 6d 70 6c 65  03 63 6f 6d 00 00 01 00
01 03 77 77 77 07 65 78  61 6d 70 6c 65 03 63 6f
6d 00 00 01 00 01 00 00  00 80 00 04 C0 00 02 01
~~~~~

# HTTP Integration

This protocol MUST be used with the https scheme URI {{RFC7230}}.

## Cache Interaction {#caching}

A DoH exchange can pass through a hierarchy of caches that include
both HTTP and DNS specific caches.
These caches may exist beteen the DoH server and client, or on the DoH client itself.
HTTP caches are by design generic;
that is, they do not understand this protocol. Even if a DoH
client has modified its cache implementation to be aware of DoH
semantics, it does not follow that all upstream caches (for example,
inline proxies, server-side gateways and Content Delivery Networks) will
be.

As a result, DoH servers need to carefully consider the HTTP
caching metadata they send in response to GET requests (POST requests
are not cacheable unless specific response headers are sent; this is
not widely implemented, and not advised for DoH).

In particular, DoH servers SHOULD assign an explicit freshness
lifetime ({{RFC7234}} Section 4.2)
so that the DoH client is more likely to use fresh DNS data.
This requirement is due to HTTP caches being able to assign
their own heuristic freshness (such as that described in {{RFC7234}} Section 4.2.2),
which would take control of the cache contents out of the hands of the DoH server.

The assigned freshness lifetime of a DoH HTTP response SHOULD be
the smallest TTL in the Answer section of the DNS response. For
example, if a HTTP response carries three RRsets with TTLs of 30, 600,
and 300, the HTTP freshness lifetime should be 30 seconds (which could be specified as
"Cache-Control: max-age=30"). The assigned freshness lifetime MUST NOT
be greater than the smallest TTL in the Answer section of the DNS
response.
This requirement helps assure that none of the RRsets contained in a DNS response are served stale
from an HTTP cache.

If the DNS response has no records in the Answer section, and the DNS
response has an SOA record in the Authority section, the response
freshness lifetime MUST NOT be greater than the MINIMUM field from
that SOA record (see {{RFC2308}}).

The stale-while-revalidate and stale-if-error Cache-Control directives
({{RFC5861}}) could be well suited to a DoH implementation when
allowed by server policy. Those mechanisms allow a client, at the
server's discretion, to reuse a cache entry that is no longer fresh.
In such a case, the client reuses all of a cached entry, or none of it.

DoH servers also need to consider caching when generating
responses that are not globally valid. For instance, if a DoH
server customizes a response based on the client's identity, it would
not want to allow global reuse of that response. This could be
accomplished through a variety of HTTP techniques such as a
Cache-Control max-age of 0, or by using the Vary response header
({{RFC7231}} Section 7.1.4) to establish a secondary cache key
({{RFC7234}} Section 4.1).

DoH clients MUST account for the Age response header's value
({{RFC7234}}) when calculating the DNS TTL of a response. For example,
if a RRset is received with a DNS TTL of 600, but the Age header
indicates that the response has been cached for 250 seconds, the
remaining lifetime of the RRset is 350 seconds.

DoH clients can request an uncached copy of a response by using
the "no-cache" request cache control directive ({{RFC7234}}, Section
5.2.1.4) and similar controls. Note that some caches might not honor
these directives, either due to configuration or interaction with
traditional DNS caches that do not have such a mechanism.

HTTP conditional requests ({{RFC7232}}) may be of limited value to
DoH, as revalidation provides only a bandwidth benefit and DNS
transactions are normally latency bound. Furthermore, the HTTP
response headers that enable revalidation (such as "Last-Modified" and
"Etag") are often fairly large when compared to the overall DNS
response size, and have a variable nature that creates constant
pressure on the HTTP/2 compression dictionary {{RFC7541}}. Other types
of DNS data, such as zone transfers, may be larger and benefit more
from revalidation.

## HTTP/2

HTTP/2 {{RFC7540}} is the minimum RECOMMENDED version of HTTP for use with DoH.

The messages in classic UDP based DNS {{RFC1035}} are inherently
unordered and have low overhead. A competitive HTTP transport needs to
support reordering, parallelism, priority, and header compression to
achieve similar performance. Those features were introduced to HTTP in
HTTP/2 {{RFC7540}}. Earlier versions of HTTP are capable of conveying
the semantic requirements of DoH but may result in very poor
performance.

## Server Push

Before using DoH response data for DNS resolution, the client MUST
establish that the HTTP request URI may be used for the DoH query.
For HTTP requests initiated by the DoH client this is
implicit in the selection of URI. For HTTP server push ({{RFC7540}}
Section 8.2) extra care must be taken to ensure that the pushed URI is
one that the client would have directed the same query to if the
client had initiated the request.

## Content Negotiation

In order to maximize interoperability, DoH clients and DoH
servers MUST support the "application/dns-message" media
type. Other media types MAY be used as defined by HTTP Content
Negotiation ({{RFC7231}} Section 3.4).
Those media types MUST be flexible enough to express every
DNS query that would normally be sent in DNS over UDP (including queries and
responses that use DNS extensions, but not those that require multiple
responses).

# Definition of the application/dns-message media type {#dnswire}

The data payload for the application/dns-message media type is a
single message of the DNS on-the-wire format defined in section 4.2.1
of {{RFC1035}}. The format was originally for DNS over UDP.  Although
{{RFC1035}} says "Messages carried by UDP are restricted to 512
bytes", that was later updated by {{RFC6891}}. This media type
restricts the maximum size of the DNS message to 65535 bytes. Note
that the wire format used in this media type is different than the
wire format used in {{RFC7858}} (which uses the format defined in
section 4.2.2 of {{RFC1035}}).

DoH clients using this media type MAY have one or more EDNS options
{{RFC6891}} in the request. DoH servers using this media type MUST ignore
the value given for the EDNS UDP payload size in DNS requests.

When using the GET method, the data payload for this media type MUST be
encoded with base64url {{RFC4648}} and then provided as a variable named
"dns" to the URI Template expansion. Padding characters for base64url MUST
NOT be included.

When using the POST method, the data payload for this media type MUST NOT
be encoded and is used directly as the HTTP message body.

# IANA Considerations {#iana}

## Registration of application/dns-message Media Type

~~~~~
To: ietf-types@iana.org
Subject: Registration of MIME media type
         application/dns-message

MIME media type name: application

MIME subtype name: dns-message

Required parameters: n/a

Optional parameters: n/a

Encoding considerations: This is a binary format. The contents are a
DNS message as defined in RFC 1035. The format used here is for DNS
over UDP, which is the format defined in the diagrams in RFC 1035.

Security considerations:  The security considerations for carrying
this data are the same for carrying DNS without encryption.

Interoperability considerations:  None.

Published specification:  This document.

Applications that use this media type:
  Systems that want to exchange full DNS messages.

Additional information:

Magic number(s):  n/a

File extension(s):  n/a

Macintosh file type code(s):  n/a

Person & email address to contact for further information:
   Paul Hoffman, paul.hoffman@icann.org

Intended usage:  COMMON

Restrictions on usage:  n/a

Author:  Paul Hoffman, paul.hoffman@icann.org

Change controller:  IESG
~~~~~

# Privacy Considerations {#Privacy}

When considering how the use of DoH affects user privacy (for example, 
compared with DNS over UDP, TCP or TLS) it is helpful to follow the analysis 
in both RFC7626 (DNS Privacy Considerations) and {{RFC6973}} 
(Privacy Considerations for Internet Protocols). 

With reference to Section 2.4 of {{RFC7626}} “On the wire”:

The privacy expectations of a user of DoH are relatively straightforward:

+ DoH encrypts DNS traffic and requires authentication of the server. 
This clearly mitigates passive surveillance and active attacks attempting 
to divert DNS traffic to rogue servers.
+ The use of port 443 by default and the ability to intermingle DNS traffic 
with HTTP traffic on the same connection can preventing on-path devices from 
interfering with DNS operations and make DNS traffic analysis more difficult.

With reference to Section 2.5 of {{RFC7626}} “In the Servers”:

HTTP and DNS are very different protocols. There exists a natural tension between 
* the wide practice in HTTP to use various headers to optimise HTTP connections, 
functionality and behaviour (which can facilitate user identification and tracking)
* and the fact that currently DNS is very tightly encoded and contains no standardized 
user identifiers (since they are acknowledged as compromising user privacy). 

DNS-over-TLS, for example, would normally contain no client identifiers in the DNS 
messages and a resolver would see only a stream of DNS queries originating from a client IP 
address. Whereas if DoH clients commonly include several headers in a DNS message 
(e.g. user-agent and accept-language) this could lead to the resolver being able to identify 
the source of individual DNS requests not only to a specific end user device but to a specific application. 

Additionally, depending on the client architecture, isolation of DNS queries from other HTTP
traffic may or may not be feasible or desirable.  Depending on the use case, isolation of DNS
queries from other HTTP traffic may or may not increase privacy. 

The picture for privacy considerations and user expectations here is complex and will require
a more detailed analysis for each particular use case. At the extremes, there may be use cases
that attempt to achieve parity with DNS-over-TLS from a privacy perspective at the cost of using
no identifiable headers, there might be others that provide feature rich data flows where the
low-level origin of the DNS query is easily identifiable. 

As guidance, implementors should consider the following:

1.  {{RFC6973}} discusses data minimisation in detail and says:
“Data minimization mitigates the following threats: surveillance, stored data compromise,
correlation, identification, secondary use, and disclosure."

2. Implementors should evaluate what identifiers could be omitted or be made less identifying 
while still fulfilling the protocol's goals. 

    a. Specifically, implementors SHOULD not use non-essential HTTP headers in DoH messages and SHOULD set the user agent string to ‘DoH client’.

    b. Implementations SHOULD only accept cookies or allow client authentication when it is required to fulfil the protocols goals (e.g. a subscription service with user opt-in).

# Security Considerations {#Security}

Running DNS over HTTPS relies on the security of the underlying
HTTP transport. This mitigates classic amplification
attacks for UDP-based DNS. Implementations utilizing HTTP/2 benefit from the TLS
profile defined in {{RFC7540}} Section 9.2.

Session level encryption has well known weaknesses with respect to
traffic analysis which might be particularly acute when dealing with
DNS queries.
HTTP/2 provides further advice about the use of compression
({{RFC7540}} Section 10.6) and padding ({{RFC7540}} Section 10.7 ).
DoH Servers can also add DNS padding {{RFC7830}} if the DoH client requests
it in the DNS query.

The HTTPS connection provides transport security for the interaction between the
DoH server and client, but does not provide the response integrity of DNS
data provided by DNSSEC. DNSSEC and DoH are independent and fully compatible
protocols, each solving different problems. The use of one does not diminish the
need nor the usefulness of the other. It is the choice of a client to either
perform full DNSSEC validation of answers or to trust the DoH server to do
DNSSEC validation and inspect the AD (Authentic Data) bit in the returned
message to determine whether an answer was authentic or not. As noted in
{{http-response}}, different response media types will provide more or less
information from a DNS response so this choice may be affected by the response
media type.

{{caching}} describes the interaction of this protocol with HTTP
caching. An adversary that can control the cache used by the client
can affect that client's view of the DNS. This is no different
than the security implications of HTTP caching for other protocols
that use HTTP.

In the absence of DNSSEC information, a DoH server can give a
client invalid data in response to a DNS query. {{selection}}
disallows the use of DoH DNS responses that do not originate from
configured servers. This prohibition does not guarantee protection against invalid
data, but it does reduce the risk.

# Operational Considerations

Local policy considerations and similar factors mean different DNS
servers may provide different results to the same query: for instance
in split DNS configurations {{RFC6950}}.  It logically follows that
the server which is queried can influence the end result.  Therefore a
client’s choice of DNS server may affect the responses it gets to its
queries.
For example, in the case of DNS64 {{RFC6147}}, the choice could affect
whether IPv6/IPv4 translation will work at all.

The HTTPS channel used by this specification establishes secure two
party communication between the DoH client and the DoH server.
Filtering or inspection systems that rely on unsecured transport of
DNS will not function in a DNS over HTTPS environment.

Some HTTPS client implementations perform real time third party checks
of the revocation status of the certificates being used by TLS. If
this check is done as part of the DoH server connection procedure
and the check itself requires DNS resolution to connect to the third
party a deadlock can occur. The use of OCSP {{RFC6960}} servers or AIA
for CRL fetching ({{RFC5280}} Section 4.2.2.1) are examples of how
this deadlock can happen.  To mitigate the possibility of deadlock,
DoH servers SHOULD NOT rely on DNS based references to external
resources in the TLS handshake. For OCSP the server can bundle the
certificate status as part of the handshake using a mechanism
appropriate to the version of TLS, such as using {{RFC6066}} Section 8
for TLS version 1.2. AIA deadlocks can be avoided by providing
intermediate certificates that might otherwise be obtained through
additional requests. Note that these deadlocks also need to be
considered for server that a DoH server might redirect to.

A DoH client may face a similar bootstrapping problem when the
HTTP request needs to resolve the hostname portion of the DNS
URI. Just as the address of a traditional DNS nameserver cannot be
originally determined from that same server, a DoH client cannot use
its DoH server to initially resolve the server's host name into an
address. Alternative strategies a client might employ include making
the initial resolution part of the configuration, IP based URIs and
corresponding IP based certificates for HTTPS, or resolving the DNS
API server's hostname via traditional DNS or another DoH server while
still authenticating the resulting connection via HTTPS.

HTTP {{RFC7230}} is a stateless application level protocol and
therefore DoH implementations do not provide stateful ordering
guarantees between different requests. DoH cannot be used as a
transport for other protocols that require strict ordering.

A DoH server is allowed to answer queries with any valid DNS response.
For example, a valid DNS response might have the TC (truncation) bit set in
the DNS header to indicate that the server
was not able to retrieve a full answer for the query but is providing
the best answer it could get.
A DoH server can reply to queries with an HTTP error
for queries that it cannot fulfill.
In this same example, a DoH server could use an HTTP error instead
of a non-error response that has the TC bit set.

Many extensions to DNS, using {{RFC6891}}, have been defined over the years.
Extensions that are specific to the choice of transport, such as {{RFC7828}},
are not applicable to DoH.

--- back

# Acknowledgments
{:numbered="false"}

This work required a high level of cooperation between experts in
different technologies. Thank you
Ray Bellis,
Stephane Bortzmeyer,
Manu Bretelle,
Sara Dickinson,
Tony Finch,
Daniel Kahn Gilmor,
Olafur Guomundsson,
Wes Hardaker,
Rory Hewitt,
Joe Hildebrand,
David Lawrence,
Eliot Lear,
John Mattsson,
Alex Mayrhofer,
Mark Nottingham,
Jim Reid,
Adam Roach,
Ben Schwartz,
Davey Song,
Daniel Stenberg,
Andrew Sullivan,
Martin Thomson,
and Sam Weiler.

# Previous Work on DNS over HTTP or in Other Formats
{:numbered="false"}

The following is an incomplete list of earlier work that related to DNS over HTTP/1 or representing DNS
data in other formats.

The list includes links to the tools.ietf.org site (because these documents
are all expired) and web sites of software.

* https://tools.ietf.org/html/draft-mohan-dns-query-xml

* https://tools.ietf.org/html/draft-daley-dnsxml

* https://tools.ietf.org/html/draft-dulaunoy-dnsop-passive-dns-cof

* https://tools.ietf.org/html/draft-bortzmeyer-dns-json

* https://www.nlnetlabs.nl/projects/dnssec-trigger/
